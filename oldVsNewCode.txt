in Jobs controller 
function index(Request $request)
    {
        $categories = Category::where('status', '1')->get();
        $jobTypes = JobType::where('status', '1')->get();
        //! Here Goes Queries
        $jobs = Job::where('status', 1);
        // search using keyword
        if (!empty($request->keyword)) {
            $jobs = $jobs->where(function ($query) use ($request) {
                $query->orWhere('title', 'like', '%' . $request->keyword . '%');
                $query->orWhere('keyWords', 'like', '%' . $request->keyword . '%');
            });
        }
        // search using location
        if (!empty($request->location)) {
            $jobs = $jobs->where('location', $request->location);
        }
        // search using category
        if (!empty($request->category)) {
            $jobs = $jobs->where('category_id', $request->category);
        }
        //search using jobType
        $jobTypeArray = [];
        if (!empty($request->jobType)) {
            $jobTypeArray = explode(',', $request->jobType);
            $jobs = $jobs->whereIn('job_type_id', $jobTypeArray);
        }
        //exp
        if (!empty($request->experience)) {
            $jobs = $jobs->where('experience', $request->experience);
        }
        //for dat query



        $jobs = $jobs->with(['jobType', 'category']);

        //for sorting jobs by date
        $jobs = $jobs->orderBy(
            'created_at',
            $request->sort == 'oldest' ? 'ASC' : 'DESC'
        );
        $jobs = $jobs->paginate(9)->onEachSide(1);

        return view('jobs', compact('categories', 'jobTypes', 'jobs', 'jobTypeArray'));
    }

=======>>>>



   function saveJob(Request $request)
    {
        $request->validate([
            'jobId' => 'required|integer|exists:jobs,id'
        ]);
        $job = Job::find($request->jobId)->exists();
        if ($job == null) {
            session()->flash('error', 'job not Found!');
            return response()->json([
                'status' => false,
            ]);
        }


        // now we will check user already saved job;
        $jobExists =   SavedJob::where([
            'user_id' => Auth::id(),
            'job_id' => $request->jobId,
        ])->exists();
        if ($jobExists) {
            session()->flash('error', 'You already applied to this Job!');
            return response()->json([
                'status' => false,
            ]);
        }
        SavedJob::create([
            'user_id' => Auth::id(),
            'job_id' => $request->jobId,
        ]);
        session()->flash('success', 'Job Saved Successfully!');
        return response()->json([
            'status' => true,
            'message' => 'job Saved Successfully!',
        ]);
        // 1. Manual validation
        $validator = Validator::make($request->all(), [
            'jobId' => 'required|integer|exists:jobs,id'
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status' => false,
                'message' => 'Validation failed',
                'errors' => $validator->errors()
            ], 422); // 422 Unprocessable Entity
        }

        // 2. Check if user already saved this job
        if (SavedJob::where([
            'user_id' => Auth::id(),
            'job_id' => $request->jobId
        ])->exists()) {
            return response()->json([
                'status' => false,
                'message' => 'You already saved this job!'
            ], 409);
        }

        // 3. Save the job
        SavedJob::create([
            'user_id' => Auth::id(),
            'job_id' => $request->jobId
        ]);

        // 4. Success response
        return response()->json([
            'status' => true,
            'message' => 'Job saved successfully!'
        ]);
    }
    }